## Installing

Follow these steps from the command line to install the AWS CLI on Linux. The only difference in the following commands is the name of the file that you download. Everything else is the same.
Important

Ensure that the paths you install to contain no volume or folder names that contain any spaces or the installation fails.
We provide the steps in one easy to copy and paste group. See the descriptions of each line in the steps that follow.
You can verify that integrity and authenticity of the installation file after you download it and before you extract the files from the package. For more information, see Verifying the Integrity and Authenticity of the Downloaded Files.

    curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
    unzip awscliv2.zip
    sudo ./aws/install

# You can download the file using the curl command. The options on the following example command cause the downloaded file to be written to the current directory with the local name awscliv2.zip.

    $ curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"

In this example, the -o option specifies the file name that the downloaded package is written to. In the previous example, the file is written to awscliv2.zip in the current folder.
Alternatively, you can use your browser to download the installer from the following URL: https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip

# Unzip the installer. The following example command unzips the package to the current folder. If your Linux distribution doesn't have a built-in unzip command, use your favorite package manager, or an equivalent, to install it.

    $ unzip awscliv2.zip

This creates a folder named aws under the current folder.

# Run the install program.

    $ sudo ./aws/install

The installation command is a file named install found in the newly unzipped aws folder. By default, the files are all installed to /usr/local/aws, and a symlink is created in /usr/local/bin. The command includes sudo to grant write permissions to those folders. You can install without sudo if you specify folders that you already have write permissions to.

You can use the following parameters with the install command to specify those folders:

Important
Ensure that the paths you provide to the -i and -b parameters contain no volume name or folder names that contain any space characters or other white space characters. If there is a space, the installation fails.

--install-dir or -i
This option specifies the folder to copy all of the files to. This example installs the files to a folder named /usr/local/aws-cli. You must have write permissions to /usr/local to create this folder.
The default value is /usr/local/aws-cli.

--bin-dir or -b
This option specifies that the main aws program in the install folder is symlinked to the file aws in the specified path. This example creates the symlink /usr/local/bin/aws. You must have write permissions to the specified folder. Creating a symlink to a folder that is already in your path eliminates the need to add the install directory to the user's $PATH variable.
The default value is /usr/local/bin.

# Confirm the installation.

    $ aws --version

OUTPUT: aws-cli/2.0.0 Python/3.7.4 Linux/4.14.133-113.105.amzn2.x86_64 botocore/2.0.0

## Quickly Configuring the AWS CLI

For general use, the aws configure command is the fastest way to set up your AWS CLI installation. The following example shows sample values. Replace them with your own values as described in the following sections.

    $ aws configure
    AWS Access Key ID [None]: AKIAIOSFODNN7EXAMPLE
    AWS Secret Access Key [None]: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
    Default region name [None]: us-west-2
    Default output format [None]: json

When you enter this command, the AWS CLI prompts you for four pieces of information (access key, secret access key, AWS Region, and output format). These are described in the following sections. The AWS CLI stores this information in a profile (a collection of settings) named default. The information in the default profile is used any time you run an AWS CLI command that doesn't explicitly specify a profile to use.

## Access Key and Secret Access Key

The AWS Access Key ID and AWS Secret Access Key are your AWS credentials. They are associated with an AWS Identity and Access Management (IAM) user or role that determines what permissions you have. For a tutorial on how to create a user with the IAM service, see Creating Your First IAM Admin User and Group in the IAM User Guide.

Access keys consist of an access key ID and secret access key, which are used to sign programmatic requests that you make to AWS. If you don't have access keys, you can create them from the AWS Management Console. As a best practice, do not use the AWS account root user access keys for any task where it's not required. Instead, create a new administrator IAM user with access keys for yourself.

The only time that you can view or download the secret access key is when you create the keys. You cannot recover them later. However, you can create new access keys at any time. You must also have permissions to perform the required IAM actions. For more information, see Permissions Required to Access IAM Resources in the IAM User Guide.

## To create access keys for an IAM user

    1. Sign in to the AWS Management Console and open the IAM console at https://console.aws.amazon.com/iam/

    2. In the navigation pane, choose Users.

    3. Choose the name of the user whose access keys you want to create, and then choose the Security credentials tab.

    4. In the Access keys section, choose Create access key.

    5. To view the new access key pair, choose Show. You will not have access to the secret access key again after this dialog box closes. Your credentials will look something like this:

        Access key ID: AKIAIOSFODNN7EXAMPLE
        Secret access key: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY

    6. To download the key pair, choose Download .csv file. Store the keys in a secure location. You will not have access to the secret access key again after this dialog box closes.
    Keep the keys confidential in order to protect your AWS account and never email them. Do not share them outside your organization, even if an inquiry appears to come from AWS or Amazon.com. No one who legitimately represents Amazon will ever ask you for your secret key.

    7. After you download the .csv file, choose Close. When you create an access key, the key pair is active by default, and you can use the pair right away.

# Related topics

    What Is IAM? (https://docs.aws.amazon.com/IAM/latest/UserGuide/introduction.html) in the IAM User Guide

    AWS Security Credentials (https://docs.aws.amazon.com/general/latest/gr/aws-security-credentials.html) in AWS General Reference

## Region

The Default region name identifies the AWS Region whose servers you want to send your requests to by default. This is typically the Region closest to you, but it can be any Region. For example, you can type us-west-2 to use US West (Oregon). This is the Region that all later requests are sent to, unless you specify otherwise in an individual command.
    Note: You must specify an AWS Region when using the AWS CLI, either explicitly or by setting a default Region. For a list of the available Regions, see Regions and Endpoints. The Region designators used by the AWS CLI are the same names that you see in AWS Management Console URLs and service endpoints.

## Output Format

The Default output format specifies how the results are formatted. The value can be any of the values in the following list. If you don't specify an output format, json is used as the default.

    json – The output is formatted as a JSON string.

    yaml – The output is formatted as a YAML string. (Available in the AWS CLI version 2 only.)

    text – The output is formatted as multiple lines of tab-separated string values. This can be useful to pass the output to a text processor, like grep, sed, or awk.

    table – The output is formatted as a table using the characters +|- to form the cell borders. It typically presents the information in a "human-friendly" format that is much easier to read than the others, but not as programmatically useful.

## Configuration Settings and Precedence

The AWS CLI uses a set of credential providers to look for AWS credentials. Each credential provider looks for credentials in a different place, such as the system or user environment variables, local AWS configuration files, or explicitly declared on the command line as a parameter. The AWS CLI looks for credentials and configuration settings by invoking the providers in the following order, stopping when it finds a set of credentials to use:

    Command line options – You can specify --region, --output, and --profile as parameters on the command line.

    Environment variables – You can store values in the environment variables: AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, and AWS_SESSION_TOKEN. If they are present, they are used.

    CLI credentials file – This is one of the files that is updated when you run the command aws configure. The file is located at ~/.aws/credentials on Linux or macOS, or at C:\Users\USERNAME\.aws\credentials on Windows. This file can contain the credential details for the default profile and any named profiles.

    CLI configuration file – This is another file that is updated when you run the command aws configure. The file is located at ~/.aws/config on Linux or macOS, or at C:\Users\USERNAME\.aws\config on Windows. This file contains the configuration settings for the default profile and any named profiles.

    Container credentials – You can associate an IAM role with each of your Amazon Elastic Container Service (Amazon ECS) task definitions. Temporary credentials for that role are then available to that task's containers. For more information, see IAM Roles for Tasks in the Amazon Elastic Container Service Developer Guide.

    Instance profile credentials – You can associate an IAM role with each of your Amazon Elastic Compute Cloud (Amazon EC2) instances. Temporary credentials for that role are then available to code running in the instance. The credentials are delivered through the Amazon EC2 metadata service. For more information, see IAM Roles for Amazon EC2 in the Amazon EC2 User Guide for Linux Instances and Using Instance Profiles in the IAM User Guide.