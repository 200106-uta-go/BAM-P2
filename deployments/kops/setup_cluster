Setup IAM user

In order to build clusters within AWS we'll create a dedicated IAM user for kops. This user requires API credentials in order to use kops. Create the user, and credentials, using the AWS console.

The kops user will require the following IAM permissions to function properly:

AmazonEC2FullAccess
AmazonRoute53FullAccess
AmazonS3FullAccess
IAMFullAccess
AmazonVPCFullAccess

You can create the kops IAM user from the command line using the following:

    $ aws iam create-group --group-name kops
    $ aws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/AmazonEC2FullAccess --group-name kops
    $ aws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/AmazonRoute53FullAccess --group-name kops
    $ aws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/AmazonS3FullAccess --group-name kops
    $ aws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/IAMFullAccess --group-name kops
    $ aws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/AmazonVPCFullAccess --group-name kops
    $ aws iam create-user --user-name kops
    $ aws iam add-user-to-group --user-name kops --group-name kops
    $ aws iam create-access-key --user-name kops

You should record the SecretAccessKey and AccessKeyID in the returned JSON output, and then use them below:

    # configure the aws client to use your new IAM user
    aws configure           # Use your new access and secret key here
    aws iam list-users      # you should see a list of all your IAM users here

    # Because "aws configure" doesn't export these vars for kops to use, we export them now
    export AWS_ACCESS_KEY_ID=$(aws configure get aws_access_key_id)
    export AWS_SECRET_ACCESS_KEY=$(aws configure get aws_secret_access_key)

#### NOT USING Route53 DNS at this time so may add that later, using .k8s.local ####

## Cluster State storage

In order to store the state of your cluster, and the representation of your cluster, we need to create a dedicated S3 bucket for kops to use. This bucket will become the source of truth for our cluster configuration. In this guide we'll call this bucket example-com-state-store, but you should add a custom prefix as bucket names need to be unique.

We recommend keeping the creation of this bucket confined to us-east-1, otherwise more work will be required.

    $ aws s3api create-bucket \
        --bucket prefix-example-com-state-store \
        --region us-east-1

Note: S3 requires --create-bucket-configuration LocationConstraint=<region> for regions other than us-east-1.

Note: We STRONGLY recommend versioning your S3 bucket in case you ever need to revert or recover a previous state store.

    $ aws s3api put-bucket-versioning --bucket prefix-example-com-state-store  --versioning-configuration Status=Enabled

Information regarding cluster state store location must be set when using kops cli see state store for further information.

Using S3 default bucket encryption

kops supports default bucket encryption to encrypt the kops state in an S3 bucket. In this way, whatever default server side encryption is set for your bucket, it will be used for the kops state, too. You may want to use this AWS feature e.g. for easily encrypting every written object by default or when for compliance reasons you need to use specific encryption keys (KMS, CMK).

If your S3 bucket has a default encryption set up, kops will use it:

    $ aws s3api put-bucket-encryption --bucket prefix-example-com-state-store --server-side-encryption-configuration '{"Rules":[{"ApplyServerSideEncryptionByDefault":{"SSEAlgorithm":"AES256"}}]}'

If the default encryption is not set or it cannot be checked, kops will resort to using client side AES256 encryption.


## Prepare local environment

    $ export NAME=temp.k8s.local
    $ export KOPS_STATE_STORE=s3://bl-bam-example

## Create cluster configuration

    $ kops create cluster \
    --cloud=aws \
    --master-zones=us-east-1a \
    --zones=us-east-1a,us-east-1b,us-east-1c \
    --node-count=3 \
    --node-size=t2.micro \
    --master-size=t2.micro \
    ${NAME}

## Build the Cluster

    $ kops update cluster temp.k8s.local --yes




